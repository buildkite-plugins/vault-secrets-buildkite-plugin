#!/bin/bash

set -eu -o pipefail

processSshSecrets() {
  local vaultServer="$1"
  local key="$2"

  echo "Found ${key}, downloading" >&2;
  if ! ssh_key=$(ssh_key_download "${vaultServer}" "$key") ; then
    echo "+++ :warning: Failed to download ssh-key $key" >&2;
    exit 1
  fi
  echo "Downloaded ${#ssh_key} bytes of ssh key"
  add_ssh_private_key_to_agent "$ssh_key"
  key_found=1

  if [[ -z "${key_found:-}" ]] && [[ "${BUILDKITE_REPO:-}" =~ ^git ]] ; then
    echo "+++ :warning: Failed to find an SSH key in secret bucket" >&2;
    exit 1
  fi
}

processEnvSecrets() {
  local vaultServer="$1"
  local key="$2"
  local envscript=''
  echo "Downloading env secret from ${key}" >&2;

  # Enhanced error checking only in debug mode
  if [[ "${DEBUG_MODE}" =~ ^(true|1)$ ]]; then
    # First check if the secret exists
    if ! vault kv get -address="$vaultServer" "$key" >/dev/null 2>&1; then
      echo "+++ :warning: Secret $key does not exist or is not accessible" >&2;
      echo "    Check the secret path and permissions" >&2;
      exit 1
    fi

    # Try to download the secret with detailed error reporting
    if ! envscript=$(echo "${envscript:-}" && secret_download "${vaultServer}" "${key}" 2>&1) ; then
      echo "+++ :warning: Failed to download env from $key" >&2;
      echo "    Error details:" >&2;
      while IFS= read -r line; do echo "    $line"; done <<< "$envscript" >&2;

      # Additional debugging for common issues
      echo "    Debugging information:" >&2;
      echo "    - Vault server: $vaultServer" >&2;
      echo "    - Secret path: $key" >&2;
      echo "    - Vault token status:" >&2;
      vault token lookup -address="$vaultServer" 2>&1 | sed 's/^/      /' >&2 || echo "      Token lookup failed" >&2;
      exit 1
    fi
  else
    # Original behavior for compatibility
    if ! envscript=$(echo "${envscript:-}" && secret_download "${vaultServer}" "${key}") ; then
      echo "+++ :warning: Failed to download env from $key" >&2;
      exit 1
    fi
  fi

  echo "Evaluating ${#envscript} bytes of env"
  set -o allexport
  eval "$envscript"
  set +o allexport
}

processGitCredentialsSecrets() {
  local vaultServer="$1"
  local key="$2"

  git_credentials=()

  echo "Adding git-credentials in $key as a credential helper" >&2;
  # if ! ssh_key=$(secret_download "${vault_server}" "$key") ; then
  # echo "Skipping as not yet supported for Vault plugin" >&2;
  git_credentials+=("'credential.helper=$basedir/git-credential-vault-secrets ${vaultServer} ${key}'")

  if [[ "${#git_credentials[@]}" -gt 0 ]] ; then
    export GIT_CONFIG_PARAMETERS
    GIT_CONFIG_PARAMETERS=$( IFS=' '; echo -n "${git_credentials[*]}" )
  fi
}

dumpEnvSecrets() {
  if [[ "${BUILDKITE_PLUGIN_VAULT_SECRETS_DUMP_ENV:-}" =~ ^(true|1)$ ]] ; then
    echo "~~~ Environment variables that were set" >&2;
    comm -13 <(echo "$env_before") <(env | sort) || true
  fi
}

_source="${BASH_SOURCE[0]}"
[ -z "${_source:-}" ] && _source="${0}"
basedir="$( cd "$( dirname "${_source}" )" && cd .. && pwd )"

# shellcheck source=lib/shared.bash
. "$basedir/lib/shared.bash"

TMPDIR=${TMPDIR:-/tmp}
VAULT_BASE_PATH="${BUILDKITE_PLUGIN_VAULT_SECRETS_PATH:-data/buildkite}"

# Check for a custom secret key from plugin config
if [[ -n "${BUILDKITE_PLUGIN_VAULT_SECRETS_SECRET:-}" ]]; then
      custom_secret="${BUILDKITE_PLUGIN_VAULT_SECRETS_SECRET:-}"
else
      custom_secret=""
fi

# Check to see if we are using a different namespace for cloud/enterprise, otherwise use the default
export VAULT_NAMESPACE="${BUILDKITE_PLUGIN_VAULT_SECRETS_NAMESPACE:-root}"
echo "Using namespace: $VAULT_NAMESPACE"

# Enable debug logging if requested (via plugin config or environment variable)
DEBUG_MODE="${BUILDKITE_PLUGIN_VAULT_SECRETS_DEBUG:-false}"
if [[ "${DEBUG_MODE}" =~ ^(true|1)$ ]]; then
  echo "~~~ :mag: Debug mode enabled" >&2
  set -x
fi

vault_server="${BUILDKITE_PLUGIN_VAULT_SECRETS_SERVER:-}"
vault_path="${VAULT_BASE_PATH:-}"
[ -n "${BUILDKITE_PLUGIN_VAULT_SECRETS_PREFIX:-}" ] && vault_path="${vault_path}/${BUILDKITE_PLUGIN_VAULT_SECRETS_PREFIX}"
[ -n "${BUILDKITE_PIPELINE_SLUG:-}" ] && vault_path="${vault_path}/${BUILDKITE_PIPELINE_SLUG}"

if [[ "${DEBUG_MODE}" =~ ^(true|1)$ ]]; then
  echo "~~~ :gear: Configuration" >&2
  echo "VAULT_SERVER: ${vault_server}" >&2
  echo "VAULT_BASE_PATH: ${VAULT_BASE_PATH}" >&2
  echo "VAULT_PATH: ${vault_path}" >&2
  echo "BUILDKITE_PLUGIN_VAULT_SECRETS_PREFIX: ${BUILDKITE_PLUGIN_VAULT_SECRETS_PREFIX:-<not set>}" >&2
  echo "BUILDKITE_PIPELINE_SLUG: ${BUILDKITE_PIPELINE_SLUG:-<not set>}" >&2
fi

if [[ -n "$vault_server" ]] ; then
  # Validate Vault server connectivity (only in debug mode)
  if [[ "${DEBUG_MODE}" =~ ^(true|1)$ ]]; then
    echo "~~~ :health_check_mark: Validating Vault server connectivity" >&2
    if ! vault status -address="$vault_server" >/dev/null 2>&1; then
      echo "+++ :warning: Unable to connect to Vault server at $vault_server" >&2
      echo "    This could be due to network issues, incorrect server URL, or Vault being unavailable" >&2
      exit 1
    fi
    echo "Vault server connectivity verified" >&2
  fi

  echo "~~~ Authenticating to :vault: $vault_server" >&2;
  vault_auth "${vault_server:-}"

  # Validate authentication was successful (only in debug mode)
  if [[ "${DEBUG_MODE}" =~ ^(true|1)$ ]]; then
    if ! vault token lookup -address="$vault_server" >/dev/null 2>&1; then
      echo "+++ :warning: Vault authentication appears to have failed" >&2
      echo "    Token validation failed - check authentication method and credentials" >&2
      exit 1
    fi
    echo "Vault authentication validated" >&2
  fi

  echo "~~~ Downloading secrets from :vault: $vault_server" >&2;

  env_before="$(env | sort)"  # used by dumpEnvSecrets
  secret_paths=(
    "${vault_path}"
    "${VAULT_BASE_PATH}"
  )

  secrets=''
  for key in "${secret_paths[@]}" ; do
    echo "Checking vault secrets ${key}" >&2

    # Enhanced path checking only in debug mode
    if [[ "${DEBUG_MODE}" =~ ^(true|1)$ ]]; then
      # Check if the secret path exists before trying to list it
      if vault kv list -address="$vault_server" "$key" >/dev/null 2>&1; then
        echo "  -> Path exists, listing secrets..." >&2
        if new_secrets=$(list_secrets "$vault_server" "$key" 2>&1); then
          secrets=$(echo "${secrets:-}" && echo "$new_secrets")
          echo "  -> Found $(echo "$new_secrets" | wc -l | tr -d ' ') secrets" >&2
        else
          echo "  -> Failed to list secrets in $key: $new_secrets" >&2
        fi
      else
        echo "  -> Path $key does not exist or is not accessible" >&2
        # Check if it's a permissions issue by trying to check if the mount exists
        if vault kv list -address="$vault_server" "$(dirname "$key")" >/dev/null 2>&1; then
          echo "  -> Parent path exists, this may be a permissions issue" >&2
        else
          echo "  -> Parent path also doesn't exist or isn't accessible" >&2
        fi
      fi
    else
      # Original behavior - just try to list secrets
      if new_secrets=$(list_secrets "$vault_server" "$key" 2>&1); then
        secrets=$(echo "${secrets:-}" && echo "$new_secrets")
      fi
    fi
  done

  if [[ "${DEBUG_MODE}" =~ ^(true|1)$ ]]; then
    echo "~~~ :key: Processing discovered secrets" >&2
    if [[ -z "${secrets:-}" ]]; then
      echo "No secrets found in any of the searched paths" >&2
    else
      echo "Found secrets:" >&2
      while IFS= read -r line; do echo "  -> $line"; done <<< "$secrets" >&2
    fi
  fi

  for secret in $secrets ; do
    # shellcheck disable=SC2034
    _key_base="$(dirname "$secret")"
    _key_name="$(basename "$secret")"

    if [[ "${DEBUG_MODE}" =~ ^(true|1)$ ]]; then
      echo "Processing secret: $secret (type: $_key_name)" >&2
    fi

    case "${_key_name:-}" in
      env|environment)
        if [[ "${DEBUG_MODE}" =~ ^(true|1)$ ]]; then
          echo "  -> Processing as environment secret" >&2
        fi
        processEnvSecrets "$vault_server" "$secret" ;;
      private_ssh_key|id_rsa_github)
        if [[ "${DEBUG_MODE}" =~ ^(true|1)$ ]]; then
          echo "  -> Processing as SSH key" >&2
        fi
        processSshSecrets "$vault_server" "$secret" ;;
      git-credentials)
        if [[ "${DEBUG_MODE}" =~ ^(true|1)$ ]]; then
          echo "  -> Processing as git credentials" >&2
        fi
        processGitCredentialsSecrets "$vault_server" "$secret" ;;
      "$custom_secret")
        if [[ "${DEBUG_MODE}" =~ ^(true|1)$ ]]; then
          echo "  -> Processing as custom secret (${custom_secret})" >&2
        fi
        processEnvSecrets "$vault_server" "$secret" ;;
      *)
        if [[ "${DEBUG_MODE}" =~ ^(true|1)$ ]]; then
          echo "  -> Skipping unknown secret type: $_key_name" >&2
        fi ;;
    esac
  done

  dumpEnvSecrets

fi
